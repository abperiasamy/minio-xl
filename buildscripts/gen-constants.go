// +build ignore

/*
 * Minio Cloud Storage, (C) 2015 Minio, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package main

import (
	"fmt"
	"net/http"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"
)

var constantsTemplate = `// --------  DO NOT EDIT --------
// This file is autogenerated by buildscripts/gen-constants.go during the release process.

package main

const (
	minioXLVersion    = {{if .Version}}"{{.Version}}"{{else}}""{{end}}
	minioXLReleaseTag = {{if .ReleaseTag}}"{{.ReleaseTag}}"{{else}}""{{end}}
	minioXLCommitID   = {{if .CommitID}}"{{.CommitID}}"{{else}}""{{end}}
)

var (
	minioXLShortCommitID = minioXLCommitID[:12]
)
`

// genConstants generates ‘build-constants.go’.
func genConstants(version string) {
	t := template.Must(template.New("constants").Parse(constantsTemplate))
	constantsFile, e := os.OpenFile("build-constants.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
	if e != nil {
		fmt.Printf("gen-constants: Unable to create ‘build-constants.go’. Error: %s.\n", e)
		os.Exit(1)
	}
	defer constantsFile.Close()

	e = t.Execute(constantsFile, struct {
		Version    string
		ReleaseTag string
		CommitID   string
	}{version, releaseTag(version), commitID()})

	if e != nil {
		fmt.Printf("gen-constants: Unable to generate ‘build-constants.go’. Error: %s.\n", e)
		os.Exit(1)
	}
}

// genReleaseTag prints release tag to the console for easy git tagging.
func releaseTag(version string) string {
	relPrefix := "UNOFFICIAL"
	if prefix := os.Getenv("MINIO_RELEASE"); prefix != "" {
		relPrefix = prefix
	}

	relTag := strings.Replace(version, " ", "-", -1)
	relTag = strings.Replace(relTag, ":", "-", -1)
	relTag = strings.Replace(relTag, ",", "", -1)
	return relPrefix + "." + relTag
}

// commitID returns the abbreviated commit-id hash of the last commit.
func commitID() string {
	// git log --format="%h" -n1
	var (
		commit []byte
		e      error
	)
	cmdName := "git"
	cmdArgs := []string{"log", "--format=%H", "-n1"}
	if commit, e = exec.Command(cmdName, cmdArgs...).Output(); e != nil {
		fmt.Fprintln(os.Stderr, "Error generating git commit-id: ", e)
		os.Exit(1)
	}

	return strings.TrimSpace(string(commit))
}

func main() {
	// Version is in HTTP TimeFormat.
	version := time.Now().UTC().Format(http.TimeFormat)

	// generate ‘build-constants.go’ file.
	genConstants(version)

	fmt.Println("Version: \"" + version + "\"")
	fmt.Println("Release-Tag: " + releaseTag(version))
	fmt.Println("Commit-ID: " + commitID())
}
